<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PHE_AUS">
	<!-- 프로젝트 생성 -->
	<insert id="createProject" parameterType="project.DTO.ProjectroomDTO">
		insert into PROJECTROOM values (PROJECTROOM_SEQ.nextval,#{pj_name},#{id},#{start_d},#{end_d},sysdate, #{mem_limit},#{pj_info},0)
		 <selectKey keyProperty="pj_num" resultType="Integer" order="AFTER">
       		select projectroom_SEQ.currval from dual
    	</selectKey>
	</insert>

	<!-- 프로젝트 관심분야 -->
	<select id="pjj_mem_search" resultType="Integer">
		select max(pjj_num) from PJ_Job
	</select>
	
	<insert id="createProjectJob" parameterType="Map">
		insert all 
			<foreach collection="list" separator=" " item="item">
				into PJ_Job values (#{item.pjj_num},${item.pj_num}, #{item.category})
			</foreach>
		SELECT * FROM DUAL
	</insert>
	<!--
	<insert>	 
		<foreach collection="list" item="item"  separator=";" open="DECLARE BEGIN" close="; END;">
			insert into PJ_Job values (PJ_JOB_SEQ.nextval, ${item.pj_num}, #{item.category})
		</foreach>
	</insert> 
	-->
	<insert id="createProjectJob2" parameterType="map">
		insert into PJ_Job values
		(PJ_JOB_SEQ.nextval, #{pj_num}, #{pj_cate})
	</insert> 

	<!-- 프로젝트 모집지역 -->
	<select id="pjl_mem_search" resultType="Integer">
		select max(pjl_num) from PJ_location
	</select>
	
	<insert id="createProjectLocation" parameterType="Map">
		insert all 
			<foreach collection="list" separator=" " item="item">
				into PJ_LOCATION values (#{item.pjl_num},${item.pj_num}, #{item.category})
			</foreach>
		SELECT * FROM DUAL
	</insert>
	
	
	<!-- <insert id="createProjectLocation" parameterType="Map">
		<foreach collection="list" item="item"  separator=";" open="DECLARE BEGIN" close="; END;">
			insert into PJ_LOCATION values (PJ_LOCATION_SEQ.nextval, ${item.pj_num}, #{item.category})
		</foreach>
	</insert> -->
	<insert id="createProjectLocation2" parameterType="project.DTO.Pj_locationDTO">
		insert into PJ_LOCATION values
		(PJ_LOCATION_SEQ.nextval, #{pj_num}, #{pj_loc})
	</insert>
	
	<!-- 프로젝트 생성시 PJ_MEM 에도 추가 -->
	<insert parameterType="Map" id="insertToPjMem"> 
		INSERT INTO PJ_MEM values (PJ_MEM_SEQ.nextval, #{pj_num}, #{id}) 
	</insert>
	

	<!-- 프로젝트 리스트(목록) -->
	<select id="projectList" resultType="project.DTO.ProjectroomDTO">
		select * from PROJECTROOM order by pj_num
	</select>

	<!-- 진행중인 프로젝트 리스트 -->
	<select id="ongoing_projectList" resultType="controller.PHE.ProjectListDTO">
			<![CDATA[ 
				select pj.id leaderId, pm.id memId, pj.*,pm.* from pj_mem pm inner join projectroom pj on pj.pj_num=pm.pj_num 
				where pm.id=#{id} and pj.end_d >= trunc(sysdate) order by regdate desc
		]]>
	</select>
	
	<!-- 완료된 프로젝트 리스트 -->
	<select id="finish_projectList" parameterType="String" resultType="controller.PHE.ProjectListDTO">
		<![CDATA[ 
				select pj.id leaderId, pm.id memId, pj.*,pm.* from pj_mem pm inner join projectroom pj on pj.pj_num=pm.pj_num 
				where pm.id=#{id} and pj.end_d < trunc(sysdate) order by regdate desc
		]]>
	</select>



	<!-- 프로젝트 클릭 시 상세 내용 보여주기 1 -->
	<select id="projectContent" resultType="project.DTO.ProjectroomDTO">
		select * from PROJECTROOM where pj_num=#{pj_num}
	</select>

	<!-- 프로젝트 클릭 시 상세 내용(관심분야 job) 보여주기 2 -->
	<select id="projectContent_job" resultType="project.DTO.Pj_jobDTO">
		select * from PJ_JOB where pj_num=#{pj_num}
	</select>

	<!-- 프로젝트 클릭 시 상세 내용(모집지역 loaction) 보여주기 3 -->
	<select id="projectContent_location" resultType="project.DTO.Pj_locationDTO">
		select * from PJ_LOCATION where pj_num=#{pj_num}
	</select>


	<!-- 프로젝트 delete -->
	<delete id="projectDelete" parameterType="Integer">
		delete from PROJECTROOM
		where pj_num=#{pj_num}
	</delete>

	<!-- 프로젝트 delete 관심분야 job -->
	<delete id="projectDelete_job" parameterType="Integer">
		delete from PJ_JOB
		where pj_num=#{pj_num}
	</delete>

	<!-- 프로젝트 delete 모집지역 location -->
	<delete id="projectDelete_location" parameterType="Integer">
		delete from
		PJ_LOCATION where pj_num=#{pj_num}
	</delete>


	<!-- 프로젝트 수정 -->
	<update id="projectModify" parameterType="project.DTO.ProjectroomDTO">
		update PROJECTROOM set
		pj_name=#{pj_name},pj_info=#{pj_info},mem_limit=#{mem_limit},end_d=#{end_d}
		where pj_num=#{pj_num}
	</update>

	<!-- 프로젝트 수정_job -->
	<!-- <update id="projectModify_job" parameterType="project.DTO.Pj_jobDTO">
		update PJ_JOB set pj_cate=#{pj_cate} where
		pj_num=#{pj_num}
	</update> -->
	
	 <update id="projectModify_job" parameterType="map">
		<foreach collection="dto_list" item="item"  separator=";" open="DECLARE BEGIN" close="; END;">
			update PJ_JOB set pj_cate=#{item.pj_cate} where pjj_num=#{item.pjj_num}		
		</foreach>
	</update>
	
	<!-- 프로젝트 수정_location -->
	<!-- <update id="projectModify_location" parameterType="project.DTO.Pj_locationDTO">
		update PJ_LOCATION set pj_loc=#{pj_loc} where
		pj_num=#{pj_num}
	</update> -->
	<update id="projectModify_location" parameterType="map">
		<foreach collection="dto_list" item="item"  separator=";" open="DECLARE BEGIN" close="; END;">
			update PJ_LOCATION set pj_loc=#{item.pj_loc} where pjl_num=#{item.pjl_num}
		</foreach>
	</update>
	
	
	
	<!-- ++++++++++++++++ 후기 리스트 +++++++++++++++  -->
	
	<!-- 프로젝트 이름과 후기 for me -->
	<select id="reviewListForMe" parameterType="String" resultType="project.DTO.ReviewDTO">
			select distinct pr.pj_name, r.review_content, score, r.pj_num from review r, projectroom pr where r.pj_num=pr.pj_num and r.target_id=#{target_id} order by r.pj_num desc
	</select>
	
	<!-- 프로젝트 이름과 후기  by me-->
		<select id="reviewListByMe" parameterType="String" resultType="controller.PHE.ReviewByMeDTO">
		select distinct m.name , pr.pj_name, r.review_content, score, r.pj_num from review r, projectroom pr, member m 
		where r.target_id=m.id and r.pj_num=pr.pj_num and r.id=#{id} order by r.pj_num desc
	</select>


 <!-- ++++++++++++++++++++++++++++++친구목록 +++++++++++++++++++++++++++++++ -->
	  <!-- select * from follow f, member m where m.id = f.friend_id and f.id='bb';  -->
	  <select id="followList"  parameterType="String" resultType="project.DTO.FollowDTO">
			select * from follow f, member m where m.id = f.friend_id and f.id=#{id}
	  </select>
	  
	  
	 <!-- ++++++++++++++++++++++++++++++ 포트폴리오 +++++++++++++++++++++++++++++++ -->	  
	  <!-- portfolio List -->
	  <select id="portfolioList"  parameterType="String" resultType="project.DTO.PortfolioDTO">
				select * from PORTFOLIO where ID=#{id} order by end_d desc
	  </select>
	  
	  <!-- 포트폴리오 상세보기  -->
	  <select id="portfolioContent" parameterType="Integer" resultType="project.DTO.PortfolioDTO" >
	  		 select * from portfolio where port_num=#{port_num} 
	  </select>
	  
	  <select id="portfolioContent_detail" parameterType="Integer" resultType="project.DTO.Port_detailDTO" >
	  		 select * from port_detail where port_num=#{port_num}
	  </select>
	  
	
	<update id="modifyPortfolio_d" parameterType="Map">
		<foreach collection="list" item="item"  separator=" ">
			update PORT_DETAIL set pd_img=#{pd_img}, pd_content=#{pd_content}
			where port_num=#{port_num}
		</foreach>
	</update>
	  
	  
  	<!-- ++++++++++++++++++++++++++++++ 알림 초대/참가 + Pj_mem +++++++++++++++++++++++++++++++ -->
	  	<!-- 1. 본인이 팀장일 경우, 타 회원이 내가 진행하는 프로젝트에 참가를 원할 때 :: (receiver==aa)+"참가" -->
		<select id="projectApplyAlarm" parameterType="map" resultType="controller.PHE.ProjectAlarmListDTO">
			select * from alarm a, projectroom p, member m 
			where receiver=#{receiver} and a_type=#{a_type} and a.pj_num = p.pj_num and a.sender=m.id order by a_date desc

		</select>
		
		<!-- 2. 본인이 일반회원일 경우, 외부 프로젝트에서 초대 제안 알림 올 때 == receiver+"초대" -->
		<!-- <select id="projectProposalAlarm" parameterType="map" resultType="controller.PHE.ProjectAlarmListDTO">
			select * from alarm a, projectroom p, member m 
			where receiver=#{receiver} and a_type=#{a_type} and a.pj_num = p.pj_num and a.sender=m.id order by a_date desc
		</select> -->
	  	
	  	<!-- 프로젝트 초대/제안 수락 (둘 다 같은 sql 씀) -->
	  	<insert id="joinMember" parameterType="map">
	  		insert into pj_mem values (PJ_MEM_SEQ.NEXTVAL,#{pj_num},#{id})
	  	</insert>
	  	
	  	<!-- 팀장인 '나'에게 외부 회원이 프로젝트 참가를 희망할 때:: pj_mem에 보낸사람 id 추가 + alarm 테이블에서 제거-->
	  	<delete id="removeFromAlarm_apply" parameterType="map">
	  		delete from alarm where sender=#{sender} and pj_num=#{pj_num}
	  	</delete>
	  	
	  	<!-- 일반회원인 '나'에게 외부 프로젝트에서 초대했을 때 :: pj_mem에 내 id 추가 + alarm 테이블에서 제거-->
	  	<delete id="removeFromAlarm_invitation" parameterType="map">
	  		delete from alarm where receiver=#{receiver} and pj_num=#{pj_num}
	  	</delete>
  	
  	
	  	<!-- 내가 신청한 프로젝트 :: sender가 본인, 참가-->
	  	<select id="apply_projectList" parameterType="map" resultType="project.DTO.AlarmDTO">
	  		select * from alarm, projectroom where alarm.pj_num = projectroom.pj_num and sender=#{sender} and a_type=#{a_type}
	  	</select>
	  	<!-- 멤버 총원 카운트  -->
	  	<select id="memberCount" parameterType="Integer" resultType="Integer">
	  		select COUNT(*) from pj_mem where pj_num=#{pj_num} 		
	  	</select>
	  	
	  	<!-- 최대 멤버   -->
	  	<select id="memberLimit" parameterType="Integer" resultType="Integer">
	  		select mem_limit from projectroom where pj_num=#{pj_num} 		
	  	</select>
	  	
	  	<!-- 해당 프로젝트에 이미 참여하고 있는지 아닌지 확인 -->
	  	<select id="memberCheck" parameterType="map" resultType="String">
	  		select id from pj_mem where pj_num=#{pj_num} and id=#{id}
	  	</select>
  	
  		<!-- 날짜 -->
	  	<select id="project_Date" parameterType="Integer" resultType="Map">
			select to_char(start_d,'YYYY-mm-dd') start_d, to_char(end_d,'YYYY-mm-dd') end_d from projectroom where pj_num=#{pj_num}
		</select>
		
	
	  	
	  	<!--+++++++++++++++++++++++++++++ Ticket ++++++++++++++++++++++++++++++++++++++++++++++  -->
	  	<!-- 티켓 개수  -->
	  	<select id="ticketCount" parameterType="map" resultType="Integer">
	  		select count(*) from ticket where t_status=#{t_status} and id=#{id}
	  		
	  	</select>
	  	
	  	<!-- 티켓 오래된거 사용완료로 업데이트 -->
	  	<update id="useTicket" parameterType="map">
	  		<![CDATA[
	  		update ticket set use_date=sysdate, t_status=#{t_status1} where t_num IN 
	  		(select t_num from(select * from ticket where t_status=#{t_status2} and id=#{id} order by t_date) where rownum<=1)
	  		]]>
	  	</update>
	  

	  <select id="projectName" parameterType="String" resultType="controller.PHE.ReviewByMeDTO">
		select distinct pj_name from review, projectroom where projectroom.pj_num = review.pj_num and review.id=#{id}
	</select>
	<select id="projectName2" parameterType="String" resultType="controller.PHE.ReviewByMeDTO">
		select distinct pj_name from review, projectroom where projectroom.pj_num = review.pj_num and review.target_id=#{id}
	</select>
	  
	  
</mapper>